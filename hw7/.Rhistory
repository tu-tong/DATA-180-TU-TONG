tidy_news <- tidy(topic_model, matrix = "gamma")
tidy_news
tidy_news <- tidy_news %>%
mutate(topicname = ifelse(topic==1, '1: glory,homeland',ifelse(topic==2,'2: god,nation',ifelse(topic==3,'3: land,love',ifelse(topic==4,'4: us,one',ifelse(topic==5,'5: may,eternal','.'))))))
top_news <- tidy_news %>%
group_by(topicname) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_news %>%
mutate(document = reorder_within(document, gamma, topicname)) %>%
ggplot(aes(gamma, document, fill = factor(topicname))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topicname, scales = "free") +
scale_y_reordered() # takes care of labels
tidy_news <- tidy(topic_model, matrix = "gamma")
tidy_news
top_news <- tidy_news %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_news %>%
mutate(document = reorder_within(document, gamma, topicname)) %>%
ggplot(aes(gamma, document, fill = factor(topicname))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topicname, scales = "free") +
scale_y_reordered() # takes care of labels
tidy_news <- tidy(topic_model, matrix = "gamma")
tidy_news
top_news <- tidy_news %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_news %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topicname))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topicname, scales = "free") +
scale_y_reordered() # takes care of labels
tidy_news <- tidy(topic_model, matrix = "gamma")
tidy_news
top_news <- tidy_news %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_news %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topicname, scales = "free") +
scale_y_reordered() # takes care of labels
tidy_news <- tidy(topic_model, matrix = "gamma")
tidy_news
tidy_news <- tidy_news %>%
mutate(topicname = ifelse(topic==1, '1: glory,homeland',ifelse(topic==2,'2: god,nation',ifelse(topic==3,'3: land,love',ifelse(topic==4,'4: us,one',ifelse(topic==5,'5: may,eternal','.'))))))
top_news <- tidy_news %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_news %>%
mutate(document = reorder_within(document, gamma, topicname)) %>%
ggplot(aes(gamma, document, fill = factor(topicname))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topicname, scales = "free") +
scale_y_reordered() # takes care of labels
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
tidy_topics2 <- tidy_topics2 %>%
mutate(topicname = ifelse(topic==1, '1: glory,homeland',ifelse(topic==2,'2: god,nation',ifelse(topic==3,'3: land,love',ifelse(topic==4,'4: us,one',ifelse(topic==5,'5: may,eternal','.'))))))
top_topics <- tidy_topics2 %>%
group_by(topicname) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topicname)) %>%
ggplot(aes(gamma, document, fill = factor(topicname))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topicname, scales = "free") +
scale_y_reordered() # takes care of labels
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topicname) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
#mydf <- dataframe(as.matrix())
mydf <- dataframe(as.matrix(news_topics))
mydf <- df(as.matrix(news_topics))
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic_1 <- mydf %>% filter(id == "text6599" | id = "text7607" | id = "text5986" | id = "text5384" | id ="text4")
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic_1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic_1=2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic_1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic_2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
#how to return a pair
library(tokenizers)
tokenize_words(charVector)
tokenize_ngrams(charVector, n=2)
library(ngram)
words <- paste(unlist(charVector), collapse = " ")
ng <- ngram(words, n=2)
head(get.phrasetable(ng), 20)
#how to return a pair
library(tokenizers)
tokenize_words(charVector)
tokenize_ngrams(charVector, n=2)
library(ngram)
words <- paste(unlist(charVector), collapse = " ")
ng <- ngram(words, n=2)
head(get.phrasetable(ng), 20)
words
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
news_topics <- convert(news_dtm, to = "topicmodels")
topic_model <- LDA(news_topics, method = "VEM", k=8)
terms(topic_model,10)
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text6599" | id == "text7607" | id == "text5986" | id == "text5384" | id =="text4")
topic2 <- mydf %>% filter(id == "text5240" | id == "text219" | id == "text1924" | id == "text7259" | id =="text1457")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text408" | id == "text6370" | id == "text8621" | id == "text1074" | id =="text7674")
topic2 <- mydf %>% filter(id == "text8949" | id == "text4894" | id == "text1367" | id == "text4494" | id =="text4902")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
library("quanteda")
library("corpus")
library("quanteda")
mostFreq <- termFreq(charVector, control = list(removePunctuation=TRUE, stopwords =TRUE))
sort(mostFreq, decreasing = TRUE)[1:20]
#how to return a pair
library(tokenizers)
tokenize_words(charVector)
tokenize_ngrams(charVector, n=2)
library(ngram)
words <- paste(unlist(charVector), collapse = " ")
ng <- ngram(words, n=2)
head(get.phrasetable(ng), 20)
newscorpus <- corpus(charVector)
paras <- corpus_reshape(newscorpus, to = "paragraphs")
#how to return a pair
library(tokenizers)
tokenize_words(charVector)
tokenize_ngrams(charVector, n=2)
library(ngram)
words <- paste(unlist(charVector), collapse = " ")
ng <- ngram(words, n=2)
head(get.phrasetable(ng), 20)
tidy_topics <- tidy(topic_model, matrix = "beta")
tidy_topics
news_top_topics <- tidy_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>% # cool func, gets the max n for each topic group
ungroup() %>% # to get the tibble without group tag
arrange(topic, -beta)
news_top_topics %>%
mutate(term = reorder_within(term, beta, topic)) %>% # this hack is to order for facet
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") + # scales="free" allows x-y scales to be free.
scale_y_reordered()
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
tidy_topics <- tidy(topic_model, matrix = "beta")
tidy_topics
news_top_topics <- tidy_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>% # cool func, gets the max n for each topic group
ungroup() %>% # to get the tibble without group tag
arrange(topic, -beta)
news_top_topics %>%
mutate(term = reorder_within(term, beta, topic)) %>% # this hack is to order for facet
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") + # scales="free" allows x-y scales to be free.
scale_y_reordered()
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
setwd("/Users/tu/Desktop/DATA180-Tu/hw7")
#library(tidyverse)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
library(dplyr)
n_distinct(news$year)
charVector <- news$headline_text
head(charVector)
wordVector <- VectorSource(charVector)
class(wordVector); typeof(wordVector); length(wordVector)
wordCorpus <- Corpus(wordVector)
class(wordCorpus); typeof(wordCorpus); length(wordCorpus)
wordCorpus <- tm_map(wordCorpus, content_transformer(tolower))
wordCorpus <- tm_map(wordCorpus, removePunctuation)
wordCorpus <- tm_map(wordCorpus, removeNumbers)
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("english"))
wordCorpus[["1"]][["content"]] #check after trimming
wordVector[1]
wordCorpus <- tm_map(wordCorpus, content_transformer(tolower))
wordCorpus <- tm_map(wordCorpus, removePunctuation)
wordCorpus <- tm_map(wordCorpus, removeNumbers)
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("english"))
wordCorpus[["1"]][["content"]] #check after trimming
wordVector[1]
tdm <- TermDocumentMatrix(wordCorpus)
tdm
m <- as.matrix(tdm)
wordCounts <- rowSums(m)
wordCounts <- sort(wordCounts, decreasing = TRUE)
head(wordCounts, 10)
totalWords <- sum(wordCounts)
barplot(wordCounts[wordCounts>=50], las=2, cex.names=0.75, xlab = "Word", ylab = "Frequency")
#positive
matchedP <- match(names(wordCounts), posWords, nomatch=0)
matchedP <- wordCounts[matchedP != 0]
sum(matchedP)/totalWords
barplot(matchedP[matchedP>=20])
#negative
matchedN <- match(names(wordCounts), negWords, nomatch=0)
matchedN <- wordCounts[matchedN != 0]
sum(matchedN)/totalWords
barplot(matchedN[matchedN>=20], cex.names=0.75, cex = 0.75)
news <- news %>% group_by(year,month) %>% mutate(count=n(), yearmonth = paste(year, month,sep = '/')) %>% arrange(year,month,day)
news
library("ggplot2")
ggplot(news, aes(x=factor(yearmonth, levels=unique(yearmonth)))) +
geom_bar() +
xlab("Time") +
ylab("Number of articles")+
theme(axis.text=element_text(size=4, angle=90))
library("quanteda")
library("quanteda")
mostFreq <- termFreq(charVector, control = list(removePunctuation=TRUE, stopwords =TRUE))
sort(mostFreq, decreasing = TRUE)[1:20]
#how to return a pair
library(tokenizers)
tokenize_words(charVector)
tokenize_ngrams(charVector, n=2)
library(ngram)
words <- paste(unlist(charVector), collapse = " ")
ng <- ngram(words, n=2)
head(get.phrasetable(ng), 20)
newscorpus <- corpus(charVector)
paras <- corpus_reshape(newscorpus, to = "paragraphs")
news_dtm <- dfm(paras, stem=TRUE, remove_punct=TRUE, remove_symbols = TRUE, remove_numbers = TRUE, remove=c(stopwords("english")))
news_dtm <- dfm_remove(news_dtm, c("s","?","?",'thi'))
news_dtm <- dfm_trim(news_dtm, min_termfreq=50) # to trim
head(colnames(news_dtm), 6)
library("quanteda.textplots")
textplot_wordcloud(news_dtm,adjust=.6)
library("topicmodels")
library('tidytext')
news_dtm <- dfm(paras, stem=TRUE, remove_punct=TRUE, remove_symbols = TRUE, remove_numbers = TRUE, remove=c(stopwords("english")))
news_dtm <- dfm_remove(news_dtm, c("s","?","?",'thi'))
news_dtm <- dfm_trim(news_dtm, min_termfreq=50) # to trim
head(colnames(news_dtm), 6)
library("quanteda.textplots")
textplot_wordcloud(news_dtm,adjust=.6)
library("topicmodels")
library('tidytext')
news_topics <- convert(news_dtm, to = "topicmodels")
topic_model <- LDA(news_topics, method = "VEM", k=8)
terms(topic_model,10)
tidy_topics <- tidy(topic_model, matrix = "beta")
tidy_topics
news_top_topics <- tidy_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>% # cool func, gets the max n for each topic group
ungroup() %>% # to get the tibble without group tag
arrange(topic, -beta)
news_top_topics %>%
mutate(term = reorder_within(term, beta, topic)) %>% # this hack is to order for facet
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") + # scales="free" allows x-y scales to be free.
scale_y_reordered()
tidy_topics2 <- tidy(topic_model, matrix = "gamma")
tidy_topics2
top_topics <- tidy_topics2 %>%
group_by(topic) %>%
slice_max(gamma, n = 5) %>%
ungroup() %>%
arrange(document, -gamma)
top_topics %>%
mutate(document = reorder_within(document, gamma, topic)) %>%
ggplot(aes(gamma, document, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
scale_y_reordered() # takes care of labels
mydf <- data.frame(as.matrix(news_topics))
mydf$id <- rownames(mydf)
topic1 <- mydf %>% filter(id == "text408" | id == "text6370" | id == "text8621" | id == "text1074" | id =="text7674")
topic2 <- mydf %>% filter(id == "text8949" | id == "text4894" | id == "text1367" | id == "text4494" | id =="text4902")
topic1 <- subset(topic1, select = -id)
topic2 <-subset(topic2, select = -id)
topic1 <- data.frame(t(topic1))
topic2 <- data.frame(t(topic2))
topic1[rowSums(topic1>0),]
topic2[rowSums(topic2>0),]
